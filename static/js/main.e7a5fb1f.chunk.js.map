{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","runBodysegment","a","bodyPix","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","segmentPersonParts","person","coloredPartImage","canvas","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8WA+FeA,MAxFf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBE,EAAc,uCAAG,4BAAAC,EAAA,sEACHC,MADG,OACfC,EADe,OAErBC,QAAQC,IAAI,yBAEZC,aAAY,WACVC,EAAOJ,KACN,KANkB,2CAAH,qDASdI,EAAM,uCAAG,WAAOJ,GAAP,yBAAAF,EAAA,yDAEkB,qBAAtBJ,EAAUW,SACK,OAAtBX,EAAUW,SAC6B,IAAvCX,EAAUW,QAAQC,MAAMC,WAJb,wBAMLD,EAAQZ,EAAUW,QAAQC,MAC1BE,EAAad,EAAUW,QAAQC,MAAME,WACrCC,EAAcf,EAAUW,QAAQC,MAAMG,YAE5Cf,EAAUW,QAAQC,MAAMI,MAAQF,EAChCd,EAAUW,QAAQC,MAAMK,OAASF,EAEjCb,EAAUS,QAAQK,MAAQF,EAC1BZ,EAAUS,QAAQM,OAASF,EAdhB,UAgBUT,EAAIY,mBAAmBN,GAhBjC,QAgBLO,EAhBK,OAiBXZ,QAAQC,IAAIW,GAENC,EAAmBf,IAA0Bc,GACnC,IACO,EACA,EACjBE,EAASnB,EAAUS,QAEzBN,IACEgB,EACAT,EACAQ,EARc,GAEO,EADA,OArBZ,4CAAH,sDAsCZ,OAFAjB,IAGE,qBAAKmB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,CACEC,IAAKvB,EACLwB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRf,MAAO,OACPC,OAAQ,UAIZ,wBACEM,IAAKrB,EACLsB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRf,MAAO,OACPC,OAAQ,gBC3ELe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e7a5fb1f.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runBodysegment = async () => {\n    const net = await bodyPix.load();\n    console.log(\"BodyPix model loaded.\");\n\n    setInterval(() => {\n      detect(net);\n    }, 690);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const person = await net.segmentPersonParts(video);\n      console.log(person);\n\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\n      const opacity = 0.6;\n      const flipHorizontal = false;\n      const maskBlurAmount = 0;\n      const canvas = canvasRef.current;\n\n      bodyPix.drawMask(\n        canvas,\n        video,\n        coloredPartImage,\n        opacity,\n        maskBlurAmount,\n        flipHorizontal\n      );\n    }\n  };\n\n  runBodysegment();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"60vw\",\n            height: \"auto\",\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"60vw\",\n            height: \"auto\",\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}